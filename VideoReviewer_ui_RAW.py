# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\VideoReviewer_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from qt_material import apply_stylesheet
import glob
import os, sys
import cv2
import threading
import time


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(2171, 801)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 10, 2154, 764))
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.groupBox)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 680, 2131, 73))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout.setContentsMargins(10, 0, 10, 0)
        self.horizontalLayout.setSpacing(10)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.Play_btn = QtWidgets.QToolButton(self.horizontalLayoutWidget)
        self.Play_btn.setEnabled(False)
        self.Play_btn.setText("")
        self.Play_btn.setAutoRaise(False)
        self.Play_btn.setObjectName("Play_btn")
        self.horizontalLayout.addWidget(self.Play_btn)

        self.Stop_btn = QtWidgets.QToolButton(self.horizontalLayoutWidget)
        self.Stop_btn.setEnabled(False)
        self.Stop_btn.setText("")
        self.Stop_btn.setAutoRaise(False)
        self.Stop_btn.setObjectName("Stop_btn")
        self.horizontalLayout.addWidget(self.Stop_btn)

        self.fast_forward_combobox = QtWidgets.QComboBox(self.horizontalLayoutWidget)
        self.fast_forward_combobox.setEnabled(False)
        self.fast_forward_combobox.setObjectName("fast_forward_combobox")
        self.horizontalLayout.addWidget(self.fast_forward_combobox)

        self.Frameslider = QtWidgets.QSlider(self.horizontalLayoutWidget)
        self.Frameslider.setEnabled(False)
        self.Frameslider.setSingleStep(1)
        self.Frameslider.setProperty("value", 0)
        self.Frameslider.setTracking(True)
        self.Frameslider.setOrientation(QtCore.Qt.Horizontal)
        self.Frameslider.setObjectName("Frameslider")
        self.horizontalLayout.addWidget(self.Frameslider)

        self.TimeCount_LineEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.TimeCount_LineEdit.setEnabled(True)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(50)
        font.setBold(True)
        font.setWeight(75)
        self.TimeCount_LineEdit.setFocusPolicy(QtCore.Qt.NoFocus)
        self.TimeCount_LineEdit.setFont(font)
        self.TimeCount_LineEdit.setCursor(QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.TimeCount_LineEdit.setMouseTracking(False)
        self.TimeCount_LineEdit.setAcceptDrops(True)
        self.TimeCount_LineEdit.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.TimeCount_LineEdit.setAutoFillBackground(False)
        self.TimeCount_LineEdit.setStyleSheet("background-color: rgba(255, 255, 255, 0); font-size:15px; color:yellow;")
        self.TimeCount_LineEdit.setFrame(False)
        self.TimeCount_LineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.TimeCount_LineEdit.setReadOnly(True)
        self.TimeCount_LineEdit.setObjectName("TimeCount_LineEdit")
        self.horizontalLayout.addWidget(self.TimeCount_LineEdit)
        self.horizontalLayout.setStretch(0,0)
        self.horizontalLayout.setStretch(1,0)
        self.horizontalLayout.setStretch(2,0)
        self.horizontalLayout.setStretch(3,90)
        self.horizontalLayout.setStretch(4,5)

        self.gridLayoutWidget = QtWidgets.QWidget(self.groupBox)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 40, 2131, 631))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(10, 10, 10, 10)
        self.gridLayout.setSpacing(20)
        self.gridLayout.setObjectName("gridLayout")

        self.Vision_lineEdit_2 = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.Vision_lineEdit_2.setFocusPolicy(QtCore.Qt.NoFocus)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.Vision_lineEdit_2.setFont(font)
        self.Vision_lineEdit_2.setStyleSheet("background-color: rgba(255, 255, 255, 0); font-size:20px; color:yellow;")
        self.Vision_lineEdit_2.setFrame(False)
        self.Vision_lineEdit_2.setReadOnly(True)
        self.Vision_lineEdit_2.setObjectName("Vision_lineEdit_2")
        self.Vision_lineEdit_2.setText('vision 2')
        self.Vision_lineEdit_2.setAlignment(QtCore.Qt.AlignCenter)
        self.gridLayout.addWidget(self.Vision_lineEdit_2, 1, 1, 1, 1)

        self.Vision_lineEdit_1 = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.Vision_lineEdit_1.setFocusPolicy(QtCore.Qt.NoFocus)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(24)
        self.Vision_lineEdit_1.setFont(font)
        self.Vision_lineEdit_1.setStyleSheet("background-color: rgba(255, 255, 255, 0); font-size:20px; color:yellow;")
        self.Vision_lineEdit_1.setFrame(False)
        self.Vision_lineEdit_1.setDragEnabled(False)
        self.Vision_lineEdit_1.setReadOnly(True)
        self.Vision_lineEdit_1.setClearButtonEnabled(False)
        self.Vision_lineEdit_1.setObjectName("Vision_lineEdit_1")
        self.Vision_lineEdit_1.setText('vision 1')
        self.Vision_lineEdit_1.setAlignment(QtCore.Qt.AlignCenter)
        self.gridLayout.addWidget(self.Vision_lineEdit_1, 1, 0, 1, 1)

        self.Vision_lineEdit_4 = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.Vision_lineEdit_4.setFocusPolicy(QtCore.Qt.NoFocus)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(24)
        self.Vision_lineEdit_4.setFont(font)
        self.Vision_lineEdit_4.setStyleSheet("background-color: rgba(255, 255, 255, 0); font-size:20px; color:yellow;")
        self.Vision_lineEdit_4.setFrame(False)
        self.Vision_lineEdit_4.setReadOnly(True)
        self.Vision_lineEdit_4.setObjectName("Vision_lineEdit_4")
        self.Vision_lineEdit_4.setText('vision 4')
        self.Vision_lineEdit_4.setAlignment(QtCore.Qt.AlignCenter)
        self.gridLayout.addWidget(self.Vision_lineEdit_4, 1, 3, 1, 1)

        self.Vision_lineEdit_5 = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.Vision_lineEdit_5.setFocusPolicy(QtCore.Qt.NoFocus)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(24)
        self.Vision_lineEdit_5.setFont(font)
        self.Vision_lineEdit_5.setStyleSheet("background-color: rgba(255, 255, 255, 0); font-size:20px; color:yellow;")
        self.Vision_lineEdit_5.setFrame(False)
        self.Vision_lineEdit_5.setReadOnly(True)
        self.Vision_lineEdit_5.setObjectName("Vision_lineEdit_5")
        self.Vision_lineEdit_5.setText('vision 5')
        self.Vision_lineEdit_5.setAlignment(QtCore.Qt.AlignCenter)
        self.gridLayout.addWidget(self.Vision_lineEdit_5, 1, 4, 1, 1)

        self.Vision_lineEdit_3 = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.Vision_lineEdit_3.setFocusPolicy(QtCore.Qt.NoFocus)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(24)
        self.Vision_lineEdit_3.setFont(font)
        self.Vision_lineEdit_3.setStyleSheet("background-color: rgba(255, 255, 255, 0); font-size:20px; color:yellow;")
        self.Vision_lineEdit_3.setFrame(False)
        self.Vision_lineEdit_3.setReadOnly(True)
        self.Vision_lineEdit_3.setObjectName("Vision_lineEdit_3")
        self.Vision_lineEdit_3.setText('vision 3')
        self.Vision_lineEdit_3.setAlignment(QtCore.Qt.AlignCenter)
        self.gridLayout.addWidget(self.Vision_lineEdit_3, 1, 2, 1, 1)

        self.Vision_label_2 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.Vision_label_2.setFrameShape(QtWidgets.QFrame.Panel)
        self.Vision_label_2.setText("")
        self.Vision_label_2.setScaledContents(True)
        self.Vision_label_2.setObjectName("Vision_label_2")
        self.gridLayout.addWidget(self.Vision_label_2, 0, 1, 1, 1)
        self.Vision_label_4 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.Vision_label_4.setFrameShape(QtWidgets.QFrame.Panel)
        self.Vision_label_4.setText("")
        self.Vision_label_4.setScaledContents(True)
        self.Vision_label_4.setObjectName("Vision_label_4")
        self.gridLayout.addWidget(self.Vision_label_4, 0, 3, 1, 1)
        self.Vision_label_1 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.Vision_label_1.setFrameShape(QtWidgets.QFrame.Panel)
        self.Vision_label_1.setText("")
        self.Vision_label_1.setScaledContents(True)
        self.Vision_label_1.setObjectName("Vision_label_1")
        self.gridLayout.addWidget(self.Vision_label_1, 0, 0, 1, 1)
        self.Vision_label_3 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.Vision_label_3.setFrameShape(QtWidgets.QFrame.Panel)
        self.Vision_label_3.setText("")
        self.Vision_label_3.setScaledContents(True)
        self.Vision_label_3.setObjectName("Vision_label_3")
        self.gridLayout.addWidget(self.Vision_label_3, 0, 2, 1, 1)
        self.Vision_label_5 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.Vision_label_5.setFrameShape(QtWidgets.QFrame.Panel)
        self.Vision_label_5.setText("")
        self.Vision_label_5.setScaledContents(True)
        self.Vision_label_5.setObjectName("Vision_label_5")
        self.gridLayout.addWidget(self.Vision_label_5, 0, 4, 1, 1)

        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.groupBox)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(10, 10, 1101, 31))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")

        font = QtGui.QFont()
        font.setFamily("Yu Gothic")
        font.setPointSize(15)
        self.Deadlift_btn = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.Deadlift_btn.setFocusPolicy(QtCore.Qt.NoFocus)
        self.Deadlift_btn.setStyleSheet("font-size:18px;")
        self.Deadlift_btn.setObjectName("Deadlift_btn")
        self.horizontalLayout_2.addWidget(self.Deadlift_btn)

        self.Benchpress_btn = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.Benchpress_btn.setFocusPolicy(QtCore.Qt.NoFocus)
        self.Benchpress_btn.setStyleSheet("font-size:18px;")
        self.Benchpress_btn.setObjectName("Benchpress_btn")
        self.horizontalLayout_2.addWidget(self.Benchpress_btn)

        self.Squat_btn = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.Squat_btn.setFocusPolicy(QtCore.Qt.NoFocus)
        self.Squat_btn.setStyleSheet("font-size:18px;")
        self.Squat_btn.setObjectName("Squat_btn")
        self.horizontalLayout_2.addWidget(self.Squat_btn)

        self.comboBox = QtWidgets.QComboBox(self.horizontalLayoutWidget_2)
        self.comboBox.setEnabled(True)
        self.comboBox.setGeometry(QtCore.QRect(110, 10, 781, 22))
        self.comboBox.setEditable(True)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.setEditable(False)
        self.comboBox.setStyleSheet("font-size:15px; color:yellow;")
        self.horizontalLayout_2.addWidget(self.comboBox)

        self.horizontalLayout_2.setStretch(0, 1)
        self.horizontalLayout_2.setStretch(1, 1)
        self.horizontalLayout_2.setStretch(2, 1)
        self.horizontalLayout_2.setStretch(3, 20)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.TimeCount_LineEdit.setPlaceholderText(_translate("MainWindow", "00:00"))
        self.Deadlift_btn.setText(_translate("MainWindow", "Deadlift"))
        self.Benchpress_btn.setText(_translate("MainWindow", "Benchpress"))
        self.Squat_btn.setText(_translate("MainWindow", "Squat"))

class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self, *args, obj=None, **kwargs):
        super(MainWindow, self).__init__(*args, **kwargs)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.icons = []
        self.cameras = []
        self.qpixmaps = []
        self.Vision_labels = [self.ui.Vision_label_1, self.ui.Vision_label_2, self.ui.Vision_label_3, self.ui.Vision_label_4, self.ui.Vision_label_5]
        self.threads = []
        self.ocv = True
        self.firstclicked_D = True
        self.firstclicked_B = True
        self.firstclicked_S = True
        self.folders = {}
        self.currentsport = ''
        self.index = 0
        self.rates = [1, 1.5, 0.8, 0.5]
        self.pause_sig = bool
        self.exited = False
        self.is_stop = bool
        self.is_slide = False
        

        # Set icon
        icon_srcs = glob.glob(self.resource_path('ui_src/*.png'))
        for icon in icon_srcs:
            self.icons.append(QtGui.QIcon(icon))
        
        self.ui.Play_btn.setIcon(self.icons[3])
        self.ui.Play_btn.clicked.connect(self.autoplay)
        self.ui.Stop_btn.setIcon(self.icons[4])
        self.ui.Stop_btn.clicked.connect(self.stop)
        for rate in self.rates:
            self.ui.fast_forward_combobox.addItems([str(rate)])
        self.ui.Frameslider.valueChanged.connect(self.sliding)
        self.ui.Frameslider.sliderMoved.connect(self.interupsliding)
        self.ui.Frameslider.sliderReleased.connect(self.slider_released)
        self.ui.Deadlift_btn.clicked.connect(self.Deadlift_btn_pressed)
        self.ui.Benchpress_btn.clicked.connect(self.Benchpress_btn_pressed)
        self.ui.Squat_btn.clicked.connect(self.Squat_btn_pressed)
        self.ui.comboBox.currentTextChanged.connect(lambda :self.readvideofile(self.currentsport))

        self.qpixmap_1 = QtGui.QPixmap()
        self.qpixmap_2 = QtGui.QPixmap()
        self.qpixmap_3 = QtGui.QPixmap()
        self.qpixmap_4 = QtGui.QPixmap()
        self.qpixmap_5 = QtGui.QPixmap()
        self.qpixmaps = [self.qpixmap_1, self.qpixmap_2, self.qpixmap_3, self.qpixmap_4, self.qpixmap_5]

    def resource_path(self, relative_path):
        base_path = getattr(sys, '_MEIPASS', os.path.abspath("."))
        return os.path.join(base_path, relative_path)
    
    def Deadlift_btn_pressed(self):
        self.ui.Deadlift_btn.setStyleSheet("font-size:18px;background-color: #888888")
        self.ui.Benchpress_btn.setStyleSheet("font-size:18px;background-color: #666666")
        self.ui.Squat_btn.setStyleSheet("font-size:18px;background-color: #666666")
        if self.firstclicked_D == True:
            for thread in self.threads:
                thread.ended = True
            folderPath = QtWidgets.QFileDialog.getExistingDirectory(None ,'Open folder', self.resource_path('C:/'))
            self.folders['Deadlift'] = folderPath
            self.firstclicked_D = False

        self.currentsport = 'Deadlift'
        self.ui.Play_btn.setEnabled(True)
        self.ui.Stop_btn.setEnabled(True)
        self.ui.Frameslider.setEnabled(True)
        self.ui.fast_forward_combobox.setEnabled(True)
        self.ui.comboBox.clear()

        list = os.listdir(self.folders['Deadlift'])
        for folder in list[::-1]:
            self.ui.comboBox.addItems([folder])
    
    def Benchpress_btn_pressed(self):
        self.ui.Benchpress_btn.setStyleSheet("font-size:18px;background-color: #888888")
        self.ui.Squat_btn.setStyleSheet("font-size:18px;background-color: #666666")
        self.ui.Deadlift_btn.setStyleSheet("font-size:18px;background-color: #666666")
        if self.firstclicked_B == True:
            for thread in self.threads:
                thread.ended = True
            folderPath = QtWidgets.QFileDialog.getExistingDirectory(None ,'Open folder', self.resource_path('C:/'))
            self.folders['Benchpress'] = folderPath
            self.firstclicked_B = False

        self.currentsport = 'Benchpress'
        self.ui.Play_btn.setEnabled(True)
        self.ui.Stop_btn.setEnabled(True)
        self.ui.Frameslider.setEnabled(True)
        self.ui.fast_forward_combobox.setEnabled(True)
        self.ui.comboBox.clear()

        list = os.listdir(self.folders['Benchpress'])
        for folder in list[::-1]:
            self.ui.comboBox.addItems([folder])

    def Squat_btn_pressed(self):
        self.ui.Squat_btn.setStyleSheet("font-size:18px;background-color: #888888")
        self.ui.Benchpress_btn.setStyleSheet("font-size:18px;background-color: #666666")
        self.ui.Deadlift_btn.setStyleSheet("font-size:18px;background-color: #666666")
        if self.firstclicked_S == True:
            for thread in self.threads:
                thread.ended = True
            folderPath = QtWidgets.QFileDialog.getExistingDirectory(None ,'Open folder', self.resource_path('C:/'))
            self.folders['Squat'] = folderPath
            self.firstclicked_S = False

        self.currentsport = 'Squat'
        self.ui.Play_btn.setEnabled(True)
        self.ui.Stop_btn.setEnabled(True)
        self.ui.Frameslider.setEnabled(True)
        self.ui.fast_forward_combobox.setEnabled(True)
        self.ui.comboBox.clear()

        list = os.listdir(self.folders['Squat'])
        for folder in list[::-1]:
            self.ui.comboBox.addItems([folder])

    # 讀取combobox內的資料夾
    def readvideofile(self, sport):
        self.file_change = True
        videofolder = self.ui.comboBox.currentText()
        self.index = 0
        self.ui.Play_btn.setIcon(self.icons[3])
        folder = self.folders[sport]
        self.videos = glob.glob(f'{folder}/{videofolder}/*.avi')
        
        self.stop()

        # Clear all the Qpixmap
        for i in range(len(self.Vision_labels)):
            self.Vision_labels[i].setPixmap(QtGui.QPixmap())

        # 臥推有六部影片，要抽取三部
        if len(self.videos) >= 6:
            self.videos = [video for video in self.videos 
                           if os.path.basename(video) in ('original_vision1.avi', 'vision2.avi', 'original_vision3.avi')
                        ]
            self.videos[1], self.videos[2] = self.videos[2], self.videos[1]

        # show the first frame of videos
        for i in range(len(self.videos)):
            thread = threading.Thread(target=self.showprevision, args=(self.videos[i], self.qpixmaps[i], self.Vision_labels[i]))
            self.threads.append(thread)
            thread.start()
        self.threads = []

    def showprevision(self, video, qpixmap, label):
        cap = cv2.VideoCapture(video)
        if self.ocv:
            _ , frame = cap.read()
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            image = QtGui.QImage(frame_rgb.data, frame_rgb.shape[1], frame_rgb.shape[0], QtGui.QImage.Format_RGB888)
            qpixmap = QtGui.QPixmap.fromImage(image)
            scaled_pixmap = qpixmap.scaled(label.size(), QtCore.Qt.KeepAspectRatio)
            label.setPixmap(scaled_pixmap)

    class MyThread(threading.Thread):
        def __init__(self, target, args=()):
            threading.Thread.__init__(self, daemon=True)
            self._pause_event = threading.Event()
            self._pause_event.set()
            self._stop_event = threading.Event()
            self.target = target
            self.args = args
            self.ended = False

        def run(self):
            while not self._stop_event.is_set():
                self._pause_event.wait()
                self.target(*self.args)

        def pause(self):
            self._pause_event.clear()

        def is_pause(self):
            return not self._pause_event.is_set()

        def resume(self):
            self._pause_event.set()

        def stop(self):
            self._stop_event.set()
            self.resume() 

    def autoplay(self):
        self.index += 1
        # play
        if self.index % 2 == 1: 
            self.ui.fast_forward_combobox.setEnabled(False)
            self.pause_sig = True
            self.is_stop = False
            self.ui.Play_btn.setIcon(self.icons[2])
            f_num = []
            for video in self.videos:
                cap = cv2.VideoCapture(video)
                f_num.append(cap.get(cv2.CAP_PROP_FRAME_COUNT))
            self.framenumber = min(f_num)

            if self.file_change:
                self.file_change = False
                for thread in self.threads:
                    thread.ended = True
                self.threads = []
                for i, video in enumerate(self.videos):
                    thread_play = self.MyThread(target=self._play, args=(video, i))
                    thread_play.start()
                    self.threads.append(thread_play)
            else:
                for thread in self.threads:
                    thread.resume()
        # pause
        elif self.index % 2 == 0:
            self.ui.fast_forward_combobox.setEnabled(True)
            self.pause_sig = False
            self.ui.Play_btn.setIcon(self.icons[3])
            for thread in self.threads:
                thread.pause()

    def _play(self, video, index):
        cap = cv2.VideoCapture(video)
        while True:
            self.speed_rate = self.ui.fast_forward_combobox.currentText()
            self.ui.Frameslider.setMaximum(int(self.framenumber))
            fps = 30 / float(self.speed_rate)
            time.sleep(0.001 * fps)
            val = self.ui.Frameslider.value()
            cap.set(cv2.CAP_PROP_POS_FRAMES, val)
            ret , frame = cap.read()

            # 迴圈暫停條件
            if self.threads[index].is_pause():
                continue
            
            # 迴圈終止條件
            if self.is_stop: # 按下暫停，迴圈終止
                cap.release()
                break

            if (self.exited or self.threads[index].ended or self.file_change): # 如果退出視窗或thread停止或換資料夾，清空label，迴圈終止
                for i, qpixmap in enumerate(self.qpixmaps):
                    qpixmap = QtGui.QPixmap()
                    self.Vision_labels[i].setPixmap(qpixmap)
                cap.release()
                break
            
            if (ret and self.pause_sig and not self.is_stop and not self.is_slide):
                if index == 0: # slider 跟著影片的幀數做移動
                    val = self.ui.Frameslider.value()
                    self.ui.Frameslider.setValue(val + 1)
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                image = QtGui.QImage(frame_rgb.data, frame_rgb.shape[1], frame_rgb.shape[0], QtGui.QImage.Format_RGB888)
                self.qpixmaps[index] = QtGui.QPixmap.fromImage(image)
                scaled_pixmap = self.qpixmaps[index].scaled(self.Vision_labels[index].size(), QtCore.Qt.KeepAspectRatio)
                self.Vision_labels[index].setPixmap(scaled_pixmap)

            else:
                continue

    def stop(self):
        self.ui.Frameslider.setSliderPosition(0)
        self.ui.Play_btn.setIcon(self.icons[3])
        self.ui.fast_forward_combobox.setEnabled(True)
        self.index = 0
        self.is_stop = True

    def slider_released(self):
        self.is_slide = False

    def interupsliding(self):
        self.is_slide = True 

    def sliding(self):
        fps = 30
        val = self.ui.Frameslider.value()
        sec = val / fps
        minute = "%02d" % int(sec / 60)
        second = "%02d" % int(sec % 60)
        self.ui.TimeCount_LineEdit.setText(f'{minute}:{second}')

    def closeEvent(self, event):
        self.exited = True
        event.accept()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    apply_stylesheet(app, theme='dark_amber.xml')
    win = MainWindow()
    win.show()
    sys.exit(app.exec_())
